@Library('marouane-dbibih@main') _

def cfg = ciConfig()
def podYaml = libraryResource('k8s/pod.yaml')

pipeline {
  agent {
    kubernetes {
      yaml podYaml
      defaultContainer 'jnlp'
    }
  }

  parameters {
    string(name: 'REPO_URL',   defaultValue: 'https://gitlab.com/mar1db-spring/car-microservice', description: 'Git repo URL')
    string(name: 'BRANCH',     defaultValue: 'main', description: 'Git branch')
    string(name: 'SERVICE_DIR',defaultValue: '.', description: 'Path to service in repo')
    string(name: 'REGISTRY',   defaultValue: 'harbor.dbibih.com', description: 'OCI registry host')
    string(name: 'PROJECT',    defaultValue: 'spring', description: 'Harbor project/namespace')
    string(name: 'IMAGE_REPO', defaultValue: 'car-microservice', description: 'Image repository name')
    string(name: 'DOCKER_CREDS_ID', defaultValue: 'harbor', description: 'Jenkins creds ID for Harbor')
    string(name: 'APP_VERSION', defaultValue: 'v1.0.0', description: 'SemVer app version (e.g., v1.0.0)')
  }

  tools {
    maven 'maven-3.8.7'
    jdk   'jdk-21.0.7'
  }

  environment {
    DOCKER_HOST = 'tcp://localhost:2375'
    REGISTRY_IMG  = "${params.REGISTRY}/${params.PROJECT}/${params.IMAGE_REPO}"
  }

  stages {
    stage('Init tools') {
      steps {
        script {
          env.SCANNER_HOME = tool cfg.scannerTool
        }
      }
    }

    stage('Checkout') {
      steps {
        git branch: params.BRANCH, credentialsId: 'gitlab', url: params.REPO_URL
      }
    }

    stage('Build JAR') {
      steps {
        mvnBuild(params.SERVICE_DIR, 'clean package -DskipTests')
      }
    }

    stage('JUnit 5Test') {
      steps {
        runMvnTests(params.SERVICE_DIR)
      }
    }

    stage('SonarQube') {
      steps {
        sonarAnalyze(params.SERVICE_DIR, cfg.sonarServerId, env.SCANNER_HOME)
      }
    }

    stage('Trivy FS Scan') {
      steps {
        container('trivy') {
          script {
            sh '''
              set -euo pipefail
              echo "Running Trivy FS scan on source code..."
              trivy fs --exit-code 0 --severity HIGH,CRITICAL ${SERVICE_DIR}
            '''
          }
        }
      }
    }

    stage('Docker Build') {
      environment {
        REGISTRY_IMG = "${params.REGISTRY}/${params.PROJECT}/${params.IMAGE_REPO}"
      }
      steps {
        script {
          def GIT_SHA = sh(script: "git -C '${params.SERVICE_DIR}' rev-parse --short HEAD", returnStdout: true).trim()

          def humanTag = "${params.APP_VERSION}+${GIT_SHA}-${env.BUILD_NUMBER}"

          def sanitize = { s ->
            def t = s.trim().replaceAll('[^A-Za-z0-9_.-]', '-')
            if (t.length() > 128) { t = t.substring(0, 128) }
            if (!t.matches('^[A-Za-z0-9_].*')) { t = "b-${t}" }
            return t
          }
          def VERSION_TAG = sanitize(params.APP_VERSION)
          def BUILD_TAG   = sanitize("${params.APP_VERSION}-${GIT_SHA}-b${env.BUILD_NUMBER}")

          echo "Image base:   ${env.REGISTRY_IMG}"
          echo "Human tag:    ${humanTag}"
          echo "Version tag:  ${VERSION_TAG}"
          echo "Build tag:    ${BUILD_TAG}"

          container('docker') {
            withDockerLogin(params.DOCKER_CREDS_ID, params.REGISTRY) {
              withEnv([
                "REGISTRY_IMG=${env.REGISTRY_IMG}",
                "SERVICE_DIR=${params.SERVICE_DIR}",
                "VERSION_TAG=${VERSION_TAG}",
                "BUILD_TAG=${BUILD_TAG}"
              ]) {
                sh """
                  set -euo pipefail
                  cp ${params.SERVICE_DIR}/target/*.jar ./app.jar
                  docker build \
                    -t "${REGISTRY_IMG}:${BUILD_TAG}" \
                    -t "${REGISTRY_IMG}:${VERSION_TAG}" \
                    -t "${REGISTRY_IMG}:latest" \
                    -f "Dockerfile" \
                    .
                """
              }
            }
          }

          env.VERSION_TAG = VERSION_TAG
          env.BUILD_TAG   = BUILD_TAG
        }
      }
    }

    stage('Trivy Image Scan') {
      steps {
        container('trivy') {
          script {
            sh '''
              echo "Running Trivy scan on built image..."
              trivy image --exit-code 0 --severity HIGH,CRITICAL "${REGISTRY_IMG}:${BUILD_TAG}"
            '''
          }
        }
      }
    }

    stage('Docker Push') {
      steps {
        container('docker') {
          withDockerLogin(params.DOCKER_CREDS_ID, params.REGISTRY) {
            sh '''
              docker push "${REGISTRY_IMG}:${BUILD_TAG}"
              docker push "${REGISTRY_IMG}:${VERSION_TAG}"
              docker push "${REGISTRY_IMG}:latest"
            '''
          }
        }
      }
    }
  }

post {
  always {
    script {
      def buildStatus = currentBuild.currentResult
      mail(
        to: 'marrouane.dbibih@gmail.com',
        subject: "${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
          Build Status: ${buildStatus}
          Job: ${env.JOB_NAME}
          Build Number: ${env.BUILD_NUMBER}
          URL: ${env.BUILD_URL}
          Image: ${env.REGISTRY_IMG}:${env.BUILD_TAG}
        """
      )
    }
  }
}
}
