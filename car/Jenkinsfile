@Library('marouane-dbibih@main') _

def cfg = ciConfig()
def podYaml = libraryResource('k8s/pod.yaml')

pipeline {
  agent {
    kubernetes {
      yaml podYaml
      defaultContainer 'jnlp'
    }
  }

  parameters {
    string(name: 'REPO_URL',   defaultValue: 'https://gitlab.com/mar1db-spring/car-microservice', description: 'Git repo URL')
    string(name: 'BRANCH',     defaultValue: 'main', description: 'Git branch')
    string(name: 'SERVICE_DIR',defaultValue: '.', description: 'Path to service in repo')
    string(name: 'REGISTRY',   defaultValue: 'harbor.dbibih.com', description: 'OCI registry host')
    string(name: 'PROJECT',    defaultValue: 'spring', description: 'Harbor project/namespace')
    string(name: 'IMAGE_REPO', defaultValue: 'car-microservice', description: 'Image repository name')
    string(name: 'DOCKER_CREDS_ID', defaultValue: 'harbor', description: 'Jenkins creds ID for Harbor')
    string(name: 'APP_VERSION', defaultValue: 'v1.0.0', description: 'SemVer app version (e.g., v1.0.0)')
  }

  tools {
    maven 'maven-3.8.7'
    jdk   'jdk-21.0.7'
  }

  environment {
    DOCKER_HOST = 'tcp://localhost:2375'
  }

  stages {
    stage('Init tools') {
      steps {
        script {
          env.SCANNER_HOME = tool cfg.scannerTool
        }
      }
    }

    stage('Checkout') {
      steps {
        git branch: params.BRANCH, credentialsId: 'gitlab', url: params.REPO_URL
      }
    }

    stage('Build') {
      steps {
        mvnBuild(params.SERVICE_DIR, 'clean package -DskipTests')
      }
    }

    stage('Test') {
      steps {
        runMvnTests(params.SERVICE_DIR)
      }
    }

    stage('SonarQube') {
      steps {
        sonarAnalyze(params.SERVICE_DIR, cfg.sonarServerId, env.SCANNER_HOME)
      }
    }

    stage('Docker Build & Push') {
      environment {
        REGISTRY_IMG = "${params.REGISTRY}/${params.PROJECT}/${params.IMAGE_REPO}"
      }
      steps {
        script {
          // short git SHA from the service dir
          def GIT_SHA = sh(script: "git -C '${params.SERVICE_DIR}' rev-parse --short HEAD", returnStdout: true).trim()

          // Desired human-friendly form (SemVer build metadata style)
          def humanTag = "${params.APP_VERSION}+${GIT_SHA}-${env.BUILD_NUMBER}"

          // Docker-valid tag (no '+', only [A-Za-z0-9_.-], max 128 chars)
          def sanitize = { s ->
            def t = s.trim().replaceAll('[^A-Za-z0-9_.-]', '-')     // replace invalid chars
            if (t.length() > 128) { t = t.substring(0, 128) }        // enforce length
            if (!t.matches('^[A-Za-z0-9_].*')) { t = "b-${t}" }      // ensure valid first char
            return t
          }
          def VERSION_TAG = sanitize(params.APP_VERSION)             // e.g., v2.0.0
          def BUILD_TAG   = sanitize("${params.APP_VERSION}-${GIT_SHA}-b${env.BUILD_NUMBER}") // e.g., v2.0.0-abcdef-b12

          echo "Image base:   ${env.REGISTRY_IMG}"
          echo "Human tag:    ${humanTag}"
          echo "Version tag:  ${VERSION_TAG}"
          echo "Build tag:    ${BUILD_TAG}"

          container('docker') {
            withDockerLogin(params.DOCKER_CREDS_ID, params.REGISTRY) {
              withEnv([
                "REGISTRY_IMG=${env.REGISTRY_IMG}",
                "SERVICE_DIR=${params.SERVICE_DIR}",
                "VERSION_TAG=${VERSION_TAG}",
                "BUILD_TAG=${BUILD_TAG}"
              ]) {
                sh '''
                  set -euo pipefail

                  # Build context is SERVICE_DIR; Dockerfile inside SERVICE_DIR/docker/Dockerfile
                  docker build \
                    -t "${REGISTRY_IMG}:${BUILD_TAG}" \
                    -t "${REGISTRY_IMG}:${VERSION_TAG}" \
                    -t "${REGISTRY_IMG}:latest" \
                    -f "Dockerfile" \
                    .

                  docker push "${REGISTRY_IMG}:${BUILD_TAG}"
                  docker push "${REGISTRY_IMG}:${VERSION_TAG}"
                  docker push "${REGISTRY_IMG}:latest"
                '''
              }
            }
          }

          echo "Pushed:"
          echo " - ${env.REGISTRY_IMG}:${BUILD_TAG}"
          echo " - ${env.REGISTRY_IMG}:${VERSION_TAG}"
          echo " - ${env.REGISTRY_IMG}:latest"
        }
      }
    }
  }  // <-- This was the missing closing brace for the stages block

  post {
    always {
      echo "Build #${env.BUILD_NUMBER} finished with status: ${currentBuild.currentResult}"
    }
  }
}